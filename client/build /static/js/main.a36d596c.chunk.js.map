{"version":3,"sources":["components/LoginForm.jsx","components/MessageForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/ChatFeed.jsx","App.js","index.js"],"names":["LoginForm","useState","username","setUsername","password","setPassword","error","setError","handleSubmit","e","a","preventDefault","authObject","axios","get","headers","localStorage","setItem","window","location","reload","className","onSubmit","type","value","onChange","target","placeholder","required","align","MessageForm","props","setValue","chatId","creds","event","text","trim","length","sendMessage","isTyping","htmlFor","PictureOutlined","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachements","src","attachments","file","alt","ClassName","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessageByUser","sender","backgroundImage","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","renderMessages","keys","Object","key","lastMessageKey","width","title","height","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a36d596c.chunk.js","sourcesContent":["import { useState } from 'react';\nimport axios from 'axios';\nconst LoginForm = () => {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState('');\n\n    \n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const authObject = { 'Project-ID': \"fdd79413-44e1-43a9-886b-b1cd7afb09cc\", 'User-Name': username, 'User-Secret': password };\n        try {\n        await axios.get('https://api.chatengine.io/chats', { headers: authObject });\n\n        localStorage.setItem('username', username);\n        localStorage.setItem('password', password);\n\n        window.location.reload();\n            // username and password- want to ask chat engine to give us back messages.\n        } catch (error) {\n            setError('wrong password mmmmhmm')\n                    // error-> try new user...\n        }\n        \n        // this means successfully logged in\n\n    }\n\nreturn (\n    <div className=\"wrapper\">\n        <div className=\"form\">\n            <h1 className=\"title\"> Chat Application</h1>\n            <form onSubmit={handleSubmit}>\n                <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"input\" placeholder=\"Username\" required />\n                <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"Password\" required />\n                <div align=\"center\">\n                    <button type=\"submit\" className=\"button\">\n                        <span> Start Chatting! </span>\n                    </button>\n                </div>\n                <h2 className=\"error\">{error}</h2>\n            </form>\n        </div>\n    </div>\n);\n}\nexport default LoginForm","import { useState } from 'react';\nimport { sendMessage, isTyping } from 'react-chat-engine';\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\n\nconst MessageForm = (props) => {\n    const [value, setValue] = useState('');\n    const { chatId, creds } = props; \n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const text = value.trim();\n        if(text.length > 0) sendMessage(creds, chatId, { text });\n        setValue('');\n\n    }\n    const handleChange = (event) => {\n        setValue(event.target.value);\n        isTyping(props, chatId);\n    }\n    const handleUpload = (event) => {\n        sendMessage(creds, chatId, { files: event.target.files, text: ''})\n    }\n    return (\n        <form className=\"message-form\" onSubmit={handleSubmit}>\n            <input className=\"message-input\"\n                    placeholder=\"Send a Message...\"\n                    value={value}\n                    onChange={handleChange}\n                    onSubmit={handleSubmit}\n                />\n                <label htmlFor=\"upload-button\"> \n                <span className=\"image-button\">\n                    <PictureOutlined className=\"picture-icon\" />\n                </span>\n                </label>\n                <input \n                type=\"file\"\n                multiple={false}\n                id=\"upload-button\"\n                style={{ display: 'none' }}\n                onChange={handleUpload}\n                />\n                <button type=\"submit\" className=\"send-button\">\n                    <SendOutlined className=\"send-icon\" />\n                </button>\n        </form>\n    );\n}\nexport default MessageForm;","const MyMessage = ({ message }) => {\n    if(message?.attachements?.length > 0) {\n        return (\n            <img\n            src={message.attachments[0].file}\n            alt=\"message-attachments\"\n            ClassName=\"message-image\"\n            style={{ float: 'right' }}\n            />\n        )\n    }\n    return (\n        <div className=\"message\" style={{ float: 'right', marginRight: '18px', color: 'white', backgroundColor: '#3B2A50' }}>\n            {message.text}\n        </div>\n    );\n}\nexport default MyMessage;","const TheirMessage = ({ lastMessage, message }) => {\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username != message.sender.username;\n\n    return (\n        <div className=\"message-row\">\n           {isFirstMessageByUser && (\n               <div \n               className=\"message-avatar\"\n               style={{backgroundImage: 'url(${message?.sender?.avatar})'}}\n               />\n           )}\n           {message?.attachements?.length > 0\n                ? (\n                    <img\n                        src={message.attachments[0].file}\n                        alt=\"message-attachments\"\n                        ClassName=\"message-image\"\n                        style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px' }}\n                    />\n                ) : (\n                    <div className=\"message\" style={{ float: 'left', backgroundColor: '#CABCDC', marginLeft: isFirstMessageByUser ? '4px' : '48px' }}>\n                         {message.text}\n                    </div>\n                )\n            }\n\n        </div>\n    );\n}\nexport default TheirMessage;","import MessageForm from './MessageForm';\nimport MyMessage from './MyMessage';\nimport TheirMessage from './TheirMessage';\n\nconst ChatFeed = (props) => {\n    const { chats, activeChat, userName, messages } = props;\n\n    const chat = chats && chats[activeChat];\n\n    const renderReadReceipts = (message, isMyMessage) => {\n        return chat.people.map((person, index) => person.last_read === message.id && (\n            <div \n                key={'read_${index}'}\n                className=\"read-receipt\"\n                style={{\n                    float: isMyMessage? 'right' : 'left',\n                    backgroundImage: 'url(${person?.person?.avatar})'\n                }}\n            />\n        ))\n    }\n\n    const renderMessages = () => {\n        const keys = Object.keys(messages);\n        return keys.map((key, index) => {\n            const message = messages[key];\n            const lastMessageKey = index === 0 ? null : keys[index - 1];\n            const isMyMessage = userName === message.sender.username;\n\n            return (\n                <div key={'msg_${index}'} style={{ width: '100%' }}> \n                    <div className=\"message-block\">\n                        {\n                            isMyMessage\n                            ? <MyMessage message={message} />\n                            : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />\n                        }\n                    </div>\n                    <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px'}}>\n                    {renderReadReceipts(message, isMyMessage)}\n                    </div>\n                </div>\n            );\n        })\n    }\n    \n    renderMessages()\n\n    if(!chat) return 'loading in 30 minutes... just kidding, just a few seconds';\n\n    return (\n        <div className=\"chat-feed\">\n            <div className=\"chat-title-container\">\n                <div className=\"chat-title\">{chat.title}</div>\n                <div className=\"chat-subtitle\">\n                     {chat.people.map((person) => ' ${person.person.username}')}\n                     </div>\n            </div>\n            {renderMessages()}\n            <div style={{ height: '100px' }} />\n            <div className=\"message-form-container\">\n                <MessageForm { ... props} chatId={activeChat} />\n            </div>\n        </div>\n    );\n\n}\nexport default ChatFeed;","import React from 'react';\n\nimport { ChatEngine } from 'react-chat-engine';\n\nimport LoginForm from './components/LoginForm';\n\nimport ChatFeed from './components/ChatFeed';\n\nimport './App.css';\n\nconst App = () => {\n    if(!localStorage.getItem('username')) return <LoginForm />\n    return (\n        <ChatEngine\n        height=\"100vh\"\n        projectID=\"fdd79413-44e1-43a9-886b-b1cd7afb09cc\"\n        userName={localStorage.getItem('username')}\n        userSecret={localStorage.getItem('password')}\n        renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps} />} \n        />\n    );\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}